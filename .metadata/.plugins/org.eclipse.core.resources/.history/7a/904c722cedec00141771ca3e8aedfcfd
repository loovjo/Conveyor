package com.loovjo.conveyor;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;

public class Main {

	public static void main(String[] args) throws Exception {
		if (args.length == 0)
			args = new String[] { "If.cvr" };
		BufferedReader br = new BufferedReader(
				new FileReader(new File(args[0])));
		ArrayList<String> lines = new ArrayList<String>();
		for (String line; (line = br.readLine()) != null; lines.add(line))
			;

		int longest = 0;
		for (String line : lines)
			longest = Math.max(line.length(), longest);

		for (int l = 0; l < lines.size(); l++) {
			lines.set(l,
					lines.get(l) + rep(" ", longest - lines.get(l).length()));
		}

		Vector pos = new Vector(0, 0);
		int currentDir = 2;
		int tryDir = 2;

		boolean stringParsing = false;
		ArrayList<Integer> stack = new ArrayList<Integer>();
		String output = "";
		while (true) {

			char currentCommand = lines.get((int) pos.getY()).charAt(
					(int) pos.getX());

			if (stringParsing && currentCommand != '"') {
				stack.add((int) currentCommand);
			} else {
				switch (currentCommand) {
				case '"':
					stringParsing = !stringParsing;
					break;
				case 'F':
					System.exit(0);
					break;
				case '.':
					char out = (char) (int) removeLast(stack);
					System.out.print(out);
					output += out;
					break;
				case ':':
					stack.add(stack.get(stack.size() - 1));
					break;
				case ',':
					String out2 = ("" + (int) removeLast(stack));
					System.out.print(out2);
					output += out2;
					break;
				case '+':
					stack.add(removeLast(stack) + removeLast(stack));
					break;
				case '*':
					stack.add(removeLast(stack) * removeLast(stack));
					break;
				case '-':
					int f = removeLast(stack);
					stack.add(removeLast(stack) - f);
					break;
				case '/':
					int l = removeLast(stack);
					stack.add(removeLast(stack) / l);
					break;
				case '?':
					stack.add((int) (Math.random() * removeLast(stack)));
					break;
				case 'G':
					stack.add(stack.get(removeLast(stack)));
					break;
				case '\\':
					int first = removeLast(stack);
					int second = removeLast(stack);
					stack.add(first);
					stack.add(second);
					break;
				case '@':
					first = removeLast(stack);
					second = removeLast(stack);
					int third = removeLast(stack);
					stack.add(first);
					stack.add(second);
					stack.add(third);
					break;
				default:
					break;
				}
				if (currentCommand >= '0' && currentCommand <= '9')
					stack.add(currentCommand - '0');
			}
			char currentGround = '=';
			if (pos.getY()+1 < lines.size())
				currentGround = lines.get((int) pos.getY() + 1).charAt(
						(int) pos.getX());
			switch (currentGround) {
			case '>':
				currentDir = 2;
				break;
			case '<':
				currentDir = 6;
				break;
			case '=':
				currentDir = tryDir;
				break;
			case '#':

				if (getLast(stack) == 0)
					currentDir = 4;
				else
					currentDir = tryDir;
				break;
			case '^':
				currentDir = 0;
				break;
			default:
				currentDir = 4;
			}
			pos = pos.moveInDir(currentDir);
			if (currentDir != 4)
				tryDir = currentDir;

			if (true) {
				Thread.sleep(500);
				System.out.println();
				for (int y = 0; y < lines.size(); y++) {
					for (int x = 0; x < lines.get(y).length(); x++) {
						if (new Vector(x, y).getLengthTo(pos) == 0)
							System.out.print("X");
						else
							System.out.print(lines.get(y).charAt(x));
					}
					System.out.println();
				}
				System.out.println("Stack:" + stack);
				System.out.print("(String version):");
				for (int element : stack)
					System.out.print((char) element);
				System.out.println();
				System.out.println("Direction: " + currentDir);
				System.out.println("Output: " + output);
			}
		}
	}

	private static int getLast(ArrayList<Integer> stack) {
		int val = 0;
		if (stack.size() > 0)
			val = stack.get(stack.size() - 1);
		return val;
	}

	private static int removeLast(ArrayList<Integer> stack) {
		if (stack.size() == 0)
			return 0;
		int val = stack.get(stack.size() - 1);
		stack.remove((int) stack.size() - 1);
		return val;
	}

	public static String rep(String s, int times) {
		return new String(new char[times]).replace("\0", s);
	}
}
